' Pictionary - Control
' Version 0.93
' Copyright Â© 2017-2019 Nonki Takahashi.  The MIT License.
' Last update 2019-04-21

GraphicsWindow.Title = "Pictionary"
SB_Workaround()
Init()
' initialize controler shapes
Shapes_Init_Controler()
iMax = Array.GetItemCount(shape)
Shapes_Add()
shp = shape[iMax]
shpLED = shp["obj"]
' initialize caption shapes
Shapes_Init_Caption()
iMax = Array.GetItemCount(shape)
Shapes_Add()
Controls.ButtonClicked = OnButtonClicked
Timer.Tick = OnTick
Timer.Pause()
Timer.Interval = 200

Sub Init
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  angle = 0 ' dummy
  scale = 1
  iMin = 1
EndSub

Sub OnButtonClicked
  Shapes.SetOpacity(shpLED, 10)
  Timer.Resume()
EndSub

Sub OnTick
  Shapes.SetOpacity(shpLED, 100)
  Timer.Pause()
EndSub
  
Sub Shapes_Init_Controler
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 220   ' x offset
  shY = 40    ' y offset
  shape = ""
  shape[1] = "pw=0;bc=#333333;func=rect;width=164;height=280;x=0;y=10;"
  shape[2] = "pw=0;bc=#333333;func=rect;width=144;height=300;x=10;y=0;"
  shape[3] = "pw=0;bc=#333333;func=ell;width=20;height=20;x=0;y=0;"
  shape[4] = "pw=0;bc=#333333;func=ell;width=20;height=20;x=0;y=280;"
  shape[5] = "pw=0;bc=#333333;func=ell;width=20;height=20;x=144;y=0;"
  shape[6] = "pw=0;bc=#333333;func=ell;width=20;height=20;x=144;y=280;"
  shape[7] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=1;x=18;y=100;"
  shape[8] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=2;x=62;y=100;"
  shape[9] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=3;x=106;y=100;"
  shape[10] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=4;x=18;y=144;"
  shape[11] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=5;x=62;y=144;"
  shape[12] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=6;x=106;y=144;"
  shape[13] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=7;x=18;y=188;"
  shape[14] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=8;x=62;y=188;"
  shape[15] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=9;x=106;y=188;"
  shape[16] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=-;x=18;y=232;"
  shape[17] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=0;x=62;y=232;"
  shape[18] = "width=40;height=40;bc=Black;fs=30;fn=Courier New;fb=False;fi=False;func=btn;text=+;x=106;y=232;"
  shape[19] = "pw=0;bc=Lime;func=ell;width=10;height=10;x=77;y=20;"
EndSub

Sub Shapes_Init_Caption
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 405 ' x offset
  shY = 358 ' y offset
  shape = ""
  shape[1] = "func=text;x=0;y=0;text=Control;fn=Trebuchet MS;fs=50;fb=True;pw=0;bc=Black;"
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub

Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn|tbox", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn|tbox", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      If shp["fb"] Then
        GraphicsWindow.FontBold = "True"
      Else
        GraphicsWindow.FontBold = "False"
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
    ElseIf shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["text"], shp["x"], shp["y"])
      Controls.SetSize(shp["obj"], shp["width"], shp["height"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub
    