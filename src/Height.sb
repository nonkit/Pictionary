' Pictionary - Height
' Version 0.92
' Copyright Â© 2017-2019 Nonki Takahashi.  The MIT License.
' Last update 2019-04-19

GraphicsWindow.Title = "Pictionary"
SB_Workaround()
Init()
' initialize car shapes
Shapes_Init_Car()
name = "Car"
Group_Add()
' initialize arrow shapes
Shapes_Init_Arrow()
name = "Arrow"
Group_Add()
' initialize caption shapes
Shapes_Init_Caption()
name = "Caption"
Group_Add()

Sub Init
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.BackgroundColor = "LightGray"
EndSub

Sub Group_Add
  ' Group | add shapes to a group
  ' param name - group name
  ' param shX, shY, origin of shape array
  ' param shape[] - shape array
  ' param nGroup - number of group
  ' return nGroup - updated number of group
  ' return group - group array
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  nGroup = nGroup + 1
  grp = ""
  grp["name"] = name
  grp["x"] = shX
  grp["y"] = shY
  grp["angle"] = 0
  grp["dir"] = 1
  Shapes_CalcWidthAndHeight()
  grp["width"] = shWidth
  grp["cx"] = shWidth / 2
  grp["height"] = shHeight
  s = 1
  grp["scale"] = s
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      If shp["fb"] = "False" Then
        GraphicsWindow.FontBold = "False"
      Else
        GraphicsWindow.FontBold = "True"
      EndIf
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    If shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)
    Else
      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  grp["shape"] = shape
  group[nGroup] = grp
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Shapes_Init_Arrow
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 60  ' x offset
  shY = 70  ' y offset
  shape = ""
  shape[1] = "func=tri;x=0;y=0;x1=10;y1=0;x2=0;y2=40;x3=20;y3=40;pw=0;bc=#333333;"
  shape[2] = "func=tri;x=0;y=214;x1=10;y1=0;x2=0;y2=40;x3=20;y3=40;angle=180;pw=0;bc=#333333;"
  shape[3] = "func=line;x=10;y=40;x1=0;y1=0;x2=0;y2=174;angle=-90;pw=6;pc=#333333;"
EndSub

Sub Shapes_Init_Caption
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = gw - 20 - 152 ' x offset
  shY = gh - 20 - 50  ' y offset
  shape = ""
  shape[1] = "func=text;x=0;y=0;text=Height;fn=Trebuchet MS;fs=50;bc=#000000;"
EndSub

Sub Shapes_Init_Car
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 90  ' x offset
  shY = 70  ' y offset
  shape = ""
  shape[1] = "func=ell;x=12.5;y=104;width=50;height=50;pw=0;bc=#FFFFCC;"
  shape[2] = "func=tri;x=150;y=4;x1=50;y1=0;x2=0;y2=100;x3=50;y3=100;pw=0;bc=#99000000;"
  shape[3] = "func=rect;x=200;y=4;width=175;height=100;pw=0;bc=#99000000;"
  shape[4] = "func=tri;x=375;y=4;x1=0;y1=0;x2=0;y2=100;x3=25;y3=100;pw=0;bc=#99000000;"
  shape[5] = "func=ell;x=400;y=104;width=50;height=50;pw=0;bc=#99FF0000;"
  shape[6] = "func=ell;x=25;y=104;width=100;height=100;pw=0;bc=#6495ED;"
  shape[7] = "func=rect;x=75;y=104;width=350;height=50;pw=0;bc=#6495ED;"
  shape[8] = "func=rect;x=25;y=154;width=400;height=50;pw=0;bc=#6495ED;"
  shape[9] = "func=line;x=200;y=4;x1=0;y1=0;x2=175;y2=0;pw=8;pc=#6495ED;"
  shape[10] = "func=ell;x=196;y=0;width=8;height=8;pw=0;bc=#6495ED;"
  shape[11] = "func=ell;x=371;y=0;width=8;height=8;pw=0;bc=#6495ED;"
  shape[12] = "func=line;x=150;y=4;x1=50;y1=0;x2=0;y2=100;pw=8;pc=#6495ED;"
  shape[13] = "func=ell;x=146;y=100;width=8;height=8;pw=0;bc=#6495ED;"
  shape[14] = "func=line;x=275;y=4;x1=0;y1=0;x2=0;y2=100;pw=8;pc=#6495ED;"
  shape[15] = "func=line;x=350;y=4;x1=0;y1=0;x2=0;y2=0;pw=8;pc=#6495ED;"
  shape[16] = "func=line;x=375;y=4;x1=0;y1=0;x2=25;y2=100;pw=8;pc=#6495ED;"
  shape[17] = "func=ell;x=396;y=100;width=8;height=8;pw=0;bc=#6495ED;"
  shape[18] = "func=ell;x=50;y=154;width=100;height=100;pw=20;pc=#333333;bc=#C0C0C0;"
  shape[19] = "func=ell;x=300;y=154;width=100;height=100;pw=20;pc=#333333;bc=#C0C0C0;"
  shape[20] = "func=rect;x=0;y=184;width=40;height=20;pw=0;bc=#C0C0C0;"
  shape[21] = "func=rect;x=410;y=184;width=40;height=20;pw=0;bc=#C0C0C0;"
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub
